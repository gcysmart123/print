C51 COMPILER V9.00   USART                                                                 03/10/2016 16:30:09 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE USART
OBJECT MODULE PLACED IN usart.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\usart.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT(.
                    -\usart.lst) TABS(2) OBJECT(usart.obj)

line level    source

   1          /***********************************************************
   2          **************************************************************/
   3          #include "usart.h"
   4          #ifdef COPY_TWO_MACHINE
   5          #include "key.h"
   6          #include "menu.h"
   7          #include "tm1629.h"
   8          #endif
   9          bit busy;
  10          uint8_t usart2_enable = 0;
  11          uint8_t usart2_data[4] = { 0, 0, 0,'\0' };
  12          uint8_t usart2_num = 0;
  13          uint8_t usart2_right = 0;
  14          uint8_t usart2_begin = 0;
  15          static const unsigned char* OKSPI = "OKSPI";
  16          static const unsigned char* SPIOK = "SPIOK";
  17          static const unsigned char* OK = "OK";
  18          
  19          #ifdef COPY_TWO_MACHINE
  20          uint8_t usart1_begin = 0;
  21          uint8_t usart1_num = 0;
  22          #endif
  23          /*----------------------------
  24          UART 中断服务程序
  25          -----------------------------*/
  26          void Uart() interrupt 4 using 1
  27          {
  28   1        unsigned char temp=0;
  29   1          if (RI)
  30   1          {
  31   2              RI = 0;                 //清除RI位
  32   2      #ifdef COPY_TWO_MACHINE
  33   2          temp = SBUF;
  34   2          if (return_func_index() == TWO_MENU_FE_E1_SET && Two_Menu_FE_status == 1)
  35   2          {
  36   3            if (temp == 0xAA) //AA表示接收正确 写2 地址加8
  37   3            {
  38   4              Two_Menu_FE_status = 2;
  39   4            }
  40   3            else if (temp == 0x55) //55表示接收错误 写0重发
  41   3            {
  42   4              Two_Menu_FE_status = 0;
  43   4            }
  44   3          }
  45   2          else if (return_func_index() == TWO_MENU_FE_E2_SET)
  46   2          {
  47   3            if (temp == 0xAA && usart1_begin == 0)
  48   3            {
  49   4              Two_Menu_FE_E2_data[0] = 0xAA; //首位
  50   4              usart1_num = 1;//数组计数
  51   4              usart1_begin = 1;//开始位置
  52   4            }
  53   3            else if (usart1_begin == 1)
  54   3            {
C51 COMPILER V9.00   USART                                                                 03/10/2016 16:30:09 PAGE 2   

  55   4              Two_Menu_FE_E2_data[usart1_num] = temp;
  56   4              usart1_num++;
  57   4              if (usart1_num == 10)
  58   4              {
  59   5                usart1_num = 0;
  60   5                usart1_begin = 0;
  61   5                if (Two_Menu_FE_E2_data[0] == 0xAA && Two_Menu_FE_E2_data[9] == 0x55) //判断正确
  62   5                {
  63   6                  Two_Menu_FE_E2_table = 1;
  64   6                }
  65   5                else
  66   5                {
  67   6                  Usart1_SendData(0x55);
  68   6                }
  69   5      
  70   5              }
  71   4            }
  72   3          }
  73   2      
  74   2      #endif
  75   2            //  computer_send_data_to_mcu();
  76   2            //  P0 = SBUF;              //P0显示串口数据
  77   2            //  P22 = RB8;              //P2.2显示校验位
  78   2          }
  79   1          if (TI)
  80   1          {
  81   2              TI = 0;                 //清除TI位
  82   2              busy = 0;               //清忙标志
  83   2          }
  84   1      }
  85          
  86          /*----------------------------
  87          UART2 中断服务程序
  88          -----------------------------*/
  89          void Uart2() interrupt 8 using 1
  90          {
  91   1        uint8_t temp=0;
  92   1        if (S2CON & S2RI)
  93   1        {
  94   2          S2CON &= ~S2RI;         //清除S2RI位
  95   2          temp = S2BUF;
  96   2          if (usart2_enable == 1 )
  97   2          {
  98   3            if (usart2_begin == 1)
  99   3            {
 100   4              usart2_data[usart2_num++] = temp;
 101   4            }
 102   3      
 103   3            if (temp == 'O'  &&  usart2_begin == 0)
 104   3            {
 105   4              usart2_begin = 1;
 106   4              usart2_num = 1;
 107   4              usart2_data[0] = temp;
 108   4            }
 109   3          }
 110   2          if (usart2_num == 2)
 111   2          {
 112   3            usart2_enable = 0;
 113   3            usart2_begin = 0;
 114   3            if (strcmp(usart2_data, OK) == 0)
 115   3            {
 116   4              usart2_right = 1;
C51 COMPILER V9.00   USART                                                                 03/10/2016 16:30:09 PAGE 3   

 117   4            }
 118   3          }
 119   2      
 120   2          //P0 = S2BUF;             //P0显示串口数据
 121   2          //P2 = (S2CON & S2RB8);   //P2.2显示校验位
 122   2        }
 123   1        if (S2CON & S2TI)
 124   1        {
 125   2          S2CON &= ~S2TI;         //清除S2TI位
 126   2          busy = 0;               //清忙标志
 127   2        }
 128   1      }
 129          
 130          /*----------------------------
 131          发送串口数据with 8 bits
 132          ----------------------------*/
 133          void Usart1_SendData(BYTE dat)
 134          {
 135   1          while (busy);               //等待前面的数据发送完成
 136   1          ACC = dat;                  //获取校验位P (PSW.0)
 137   1          if (P)                      //根据P来设置校验位
 138   1          {
 139   2      #if (PARITYBIT == ODD_PARITY)
                      TB8 = 0;                //设置校验位为0
              #elif (PARITYBIT == EVEN_PARITY)
                      TB8 = 1;                //设置校验位为1
              #endif
 144   2          }
 145   1          else
 146   1          {
 147   2      #if (PARITYBIT == ODD_PARITY)
                      TB8 = 1;                //设置校验位为1
              #elif (PARITYBIT == EVEN_PARITY)
                      TB8 = 0;                //设置校验位为0
              #endif
 152   2          }
 153   1          busy = 1;
 154   1          SBUF = ACC;                 //写数据到UART数据寄存器
 155   1      }
 156          
 157          /*----------------------------
 158          发送字符串
 159          ----------------------------*/
 160          void Usart1_SendString(char *s)
 161          {
 162   1          while (*s)                  //检测字符串结束标志
 163   1          {
 164   2          Usart1_SendData(*s++);         //发送当前字符
 165   2          }
 166   1      }
 167          
 168          /*----------------------------
 169          发送串口数据
 170          ----------------------------*/
 171          void Usart2_SendData(BYTE dat)
 172          {
 173   1        while (busy);               //等待前面的数据发送完成
 174   1        ACC = dat;                  //获取校验位P (PSW.0)
 175   1        if (P)                      //根据P来设置校验位
 176   1        {
 177   2      #if (PARITYBIT == ODD_PARITY)
                  S2CON &= ~S2TB8;        //设置校验位为0
C51 COMPILER V9.00   USART                                                                 03/10/2016 16:30:09 PAGE 4   

              #elif (PARITYBIT == EVEN_PARITY)
                  S2CON |= S2TB8;         //设置校验位为1
              #endif
 182   2        }
 183   1        else
 184   1        {
 185   2      #if (PARITYBIT == ODD_PARITY)
                  S2CON |= S2TB8;         //设置校验位为1
              #elif (PARITYBIT == EVEN_PARITY)
                  S2CON &= ~S2TB8;        //设置校验位为0
              #endif
 190   2        }
 191   1        busy = 1;
 192   1        S2BUF = ACC;                //写数据到UART2数据寄存器
 193   1      }
 194          
 195          /*----------------------------
 196          发送字符串
 197          ----------------------------*/
 198          void Usart2_SendString(char *s)
 199          {
 200   1        while (*s)                  //检测字符串结束标志
 201   1        {
 202   2          Usart2_SendData(*s++);         //发送当前字符
 203   2        }
 204   1      }
 205          
 206          #ifdef PRINTER
 207          /*----------------------------
 208          发送串口数据with 8 bits
 209          ----------------------------*/
 210          void SendData(BYTE dat)
 211          {
 212   1          while (busy);               //等待前面的数据发送完成
 213   1          ACC = dat;                  //获取校验位P (PSW.0)
 214   1          if (P)                      //根据P来设置校验位
 215   1          {
 216   2      #if (PARITYBIT == ODD_PARITY)
                      TB8 = 0;                //设置校验位为0
              #elif (PARITYBIT == EVEN_PARITY)
                      TB8 = 1;                //设置校验位为1
              #endif
 221   2          }
 222   1          else
 223   1          {
 224   2      #if (PARITYBIT == ODD_PARITY)
                      TB8 = 1;                //设置校验位为1
              #elif (PARITYBIT == EVEN_PARITY)
                      TB8 = 0;                //设置校验位为0
              #endif
 229   2          }
 230   1          busy = 1;
 231   1          SBUF = ACC;                 //写数据到UART数据寄存器
 232   1      }
 233          
 234          /*----------------------------
 235          发送字符串
 236          ----------------------------*/
 237          void SendString(char *s)
 238          {
 239   1          while (*s)                  //检测字符串结束标志
 240   1          {
C51 COMPILER V9.00   USART                                                                 03/10/2016 16:30:09 PAGE 5   

 241   2              SendData(*s++);         //发送当前字符
 242   2          }
 243   1      }
 244          #endif
 245          /*uart init with baud settings----transfer mode-----open serial port*/
 246          void UsartInit(void)
 247          {
 248   1          ACC = P_SW1;
 249   1          ACC &= ~(S1_S0 | S1_S1);    //S1_S0=0 S1_S1=0
 250   1          P_SW1 = ACC;                //(P3.0/RxD, P3.1/TxD)
 251   1          
 252   1      //  ACC = P_SW1;
 253   1      //  ACC &= ~(S1_S0 | S1_S1);    //S1_S0=1 S1_S1=0
 254   1      //  ACC |= S1_S0;               //(P3.6/RxD_2, P3.7/TxD_2)
 255   1      //  P_SW1 = ACC;  
 256   1      //  
 257   1      //  ACC = P_SW1;
 258   1      //  ACC &= ~(S1_S0 | S1_S1);    //S1_S0=0 S1_S1=1
 259   1      //  ACC |= S1_S1;               //(P1.6/RxD_3, P1.7/TxD_3)
 260   1      //  P_SW1 = ACC;  
 261   1      
 262   1        P_SW2 &= ~S2_S0;            //S2_S0=0 (P1.0/RxD2, P1.1/TxD2)
 263   1        //  P_SW2 |= S2_S0;             //S2_S0=1 (P4.6/RxD2_2, P4.7/TxD2_2)
 264   1      
 265   1      #if (PARITYBIT == NONE_PARITY)
 266   1          SCON = 0x50;                //8位可变波特率
 267   1      #elif (PARITYBIT == ODD_PARITY) || (PARITYBIT == EVEN_PARITY) || (PARITYBIT == MARK_PARITY)
                  SCON = 0xda;                //9位可变波特率,校验位初始为1
              #elif (PARITYBIT == SPACE_PARITY)
                  SCON = 0xd2;                //9位可变波特率,校验位初始为0
              #endif
 272   1      
 273   1      #if (PARITYBIT == NONE_PARITY)
 274   1        S2CON = 0x50;               //8位可变波特率
 275   1      #elif (PARITYBIT == ODD_PARITY) || (PARITYBIT == EVEN_PARITY) || (PARITYBIT == MARK_PARITY)
                S2CON = 0xda;               //9位可变波特率,校验位初始为1
              #elif (PARITYBIT == SPACE_PARITY)
                S2CON = 0xd2;               //9位可变波特率,校验位初始为0
              #endif
 280   1      
 281   1      
 282   1          T2L = (65536 - (FOSC/4/BAUD));   //设置波特率重装值
 283   1          T2H = (65536 - (FOSC/4/BAUD))>>8;
 284   1          AUXR = 0x14;                //T2为1T模式, 并启动定时器2
 285   1          AUXR |= 0x01;               //选择定时器2为串口1的波特率发生器
 286   1          ES = 1;                     //使能串口中断
 287   1        IE2 = 0x01;                 //使能串口2中断
 288   1          EA = 1;
 289   1      
 290   1        //Usart1_SendString("STC15F2K60S2\r\nUart Test !\r\n");
 291   1        //Usart2_SendString("STC15F2K60S2\r\nUart2 Test !\r\n");
 292   1        
 293   1      }
 294          
 295          void uart_printf(const char *fmt, ...)
 296          {
 297   1        va_list ap;
 298   1        char xdata string[256];//访问内部拓展RAM，非访问外部RAM，不能超过内部拓展RAM大小(此处为1024)  
 299   1      
 300   1        va_start(ap, fmt);
 301   1        vsprintf(string, fmt, ap);//此处也可以使用sprintf函数，用法差不多，稍加修改即可，此处略去  
 302   1        Usart1_SendString(string);
C51 COMPILER V9.00   USART                                                                 03/10/2016 16:30:09 PAGE 6   

 303   1        va_end(ap);
 304   1      }
 305          
 306          ///*Switch to uart2 port by hardware*/
 307          //void usart2_SendData(void)
 308          //{
 309          //  ACC = P_SW1;
 310          //  ACC &= ~(S1_S0 | S1_S1);    //S1_S0=0 S1_S1=1
 311          //  ACC |= S1_S1;               //(P1.6/RxD_3, P1.7/TxD_3)
 312          //  P_SW1 = ACC; 
 313          //}
 314          //
 315          ///*Switch to uart1 port by hardware*/
 316          //void usart1_SendData(void)
 317          //{
 318          //    ACC = P_SW1;
 319          //    ACC &= ~(S1_S0 | S1_S1);    //S1_S0=0 S1_S1=0
 320          //    P_SW1 = ACC;                //(P3.0/RxD, P3.1/TxD)
 321          //}
 322          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    639    ----
   CONSTANT SIZE    =     15    ----
   XDATA SIZE       =     19     312
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
