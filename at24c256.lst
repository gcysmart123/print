C51 COMPILER V9.00   AT24C256                                                              03/10/2016 16:30:10 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE AT24C256
OBJECT MODULE PLACED IN at24c256.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\at24c256.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRIN
                    -T(.\at24c256.lst) TABS(2) OBJECT(at24c256.obj)

line level    source

   1          #include "at24c256.h"
   2          #include "key.h"
   3          #include "usart.h"
   4          #include "menu.h"
   5          #include "gd5800.h"
   6          
   7          bit ack;                //应答标志位
   8          Env_t EEPROM;
   9          void DelayUs2x(unsigned char t)
  10          {
  11   1        while (--t);
  12   1      }
  13          /*------------------------------------------------
  14          mS延时函数，含有输入参数 unsigned char t，无返回值
  15          unsigned char 是定义无符号字符变量，其值的范围是
  16          0~255 这里使用晶振12M，精确延时请使用汇编
  17          ------------------------------------------------*/
  18          void DelayMs(unsigned char t)
  19          {
  20   1        while (t--)
  21   1        {
  22   2          //大致延时1mS
  23   2          DelayUs2x(245);
  24   2          DelayUs2x(245);
  25   2        }
  26   1      }
  27          
  28          
  29          /*------------------------------------------------
  30          启动总线
  31          ------------------------------------------------*/
  32          void Start_I2c()
  33          {
  34   1        SDA = 1;   //发送起始条件的数据信号
  35   1        _Nop();
  36   1        SCL = 1;
  37   1        _Nop();    //起始条件建立时间大于4.7us,延时
  38   1        _Nop();
  39   1        _Nop();
  40   1        _Nop();
  41   1        _Nop();
  42   1        SDA = 0;     //发送起始信号
  43   1        _Nop();    //起始条件锁定时间大于4μ
  44   1        _Nop();
  45   1        _Nop();
  46   1        _Nop();
  47   1        _Nop();
  48   1        SCL = 0;    //钳住I2C总线，准备发送或接收数据
  49   1        _Nop();
  50   1        _Nop();
  51   1      }
  52          /*------------------------------------------------
  53          结束总线
  54          ------------------------------------------------*/
C51 COMPILER V9.00   AT24C256                                                              03/10/2016 16:30:10 PAGE 2   

  55          void Stop_I2c()
  56          {
  57   1        SDA = 0;    //发送结束条件的数据信号
  58   1        _Nop();   //发送结束条件的时钟信号
  59   1        SCL = 1;    //结束条件建立时间大于4μ
  60   1        _Nop();
  61   1        _Nop();
  62   1        _Nop();
  63   1        _Nop();
  64   1        _Nop();
  65   1        SDA = 1;    //发送I2C总线结束信号
  66   1        _Nop();
  67   1        _Nop();
  68   1        _Nop();
  69   1        _Nop();
  70   1      }
  71          
  72          /*----------------------------------------------------------------
  73          字节数据传送函数
  74          函数原型: void  SendByte(unsigned char c);
  75          功能:  将数据c发送出去,可以是地址,也可以是数据,发完后等待应答,并对
  76          此状态位进行操作.(不应答或非应答都使ack=0 假)
  77          发送数据正常，ack=1; ack=0表示被控器无应答或损坏。
  78          ------------------------------------------------------------------*/
  79          void  SendByte(unsigned char c)
  80          {
  81   1        unsigned char BitCnt;
  82   1        for (BitCnt = 0; BitCnt<8; BitCnt++)  //要传送的数据长度为8位
  83   1        {
  84   2          if ((c << BitCnt) & 0x80)
  85   2            SDA = 1;   //判断发送位
  86   2          else
  87   2            SDA = 0;
  88   2          _Nop();
  89   2          SCL = 1;               //置时钟线为高，通知被控器开始接收数据位
  90   2          _Nop();
  91   2          _Nop();             //保证时钟高电平周期大于4μ
  92   2          _Nop();
  93   2          _Nop();
  94   2          _Nop();
  95   2          SCL = 0;
  96   2        }
  97   1        _Nop();
  98   1        _Nop();
  99   1        SDA = 1;               //8位发送完后释放数据线，准备接收应答位
 100   1        _Nop();
 101   1        _Nop();
 102   1        SCL = 1;
 103   1        _Nop();
 104   1        _Nop();
 105   1        _Nop();
 106   1        if (SDA == 1)ack = 0;
 107   1        else ack = 1;        //判断是否接收到应答信号
 108   1        SCL = 0;
 109   1        _Nop();
 110   1        _Nop();
 111   1      }
 112          
 113          /*----------------------------------------------------------------
 114          字节数据传送函数
 115          函数原型: unsigned char  RcvByte();
 116          功能:  用来接收从器件传来的数据,并判断总线错误(不发应答信号)，
C51 COMPILER V9.00   AT24C256                                                              03/10/2016 16:30:10 PAGE 3   

 117          发完后请用应答函数。
 118          ------------------------------------------------------------------*/
 119          unsigned char  RcvByte()
 120          {
 121   1        unsigned char retc;
 122   1        unsigned char BitCnt;
 123   1        retc = 0;
 124   1        SDA = 1;             //置数据线为输入方式
 125   1        for (BitCnt = 0; BitCnt<8; BitCnt++)
 126   1        {
 127   2          _Nop();
 128   2          SCL = 0;       //置时钟线为低，准备接收数据位
 129   2          _Nop();
 130   2          _Nop();      //时钟低电平周期大于4.7us
 131   2          _Nop();
 132   2          _Nop();
 133   2          _Nop();
 134   2          SCL = 1;       //置时钟线为高使数据线上数据有效
 135   2          _Nop();
 136   2          _Nop();
 137   2          retc = retc << 1;
 138   2          if (SDA == 1)retc = retc + 1; //读数据位,接收的数据位放入retc中
 139   2          _Nop();
 140   2          _Nop();
 141   2        }
 142   1        SCL = 0;
 143   1        _Nop();
 144   1        _Nop();
 145   1        return(retc);
 146   1      }
 147          
 148          
 149          /*----------------------------------------------------------------
 150          应答子函数
 151          原型:  void Ack_I2c(void);
 152          
 153          ----------------------------------------------------------------*/
 154          void Ack_I2c(void)
 155          {
 156   1        SDA = 0;
 157   1        _Nop();
 158   1        _Nop();
 159   1        _Nop();
 160   1        SCL = 1;
 161   1        _Nop();
 162   1        _Nop();              //时钟低电平周期大于4μ
 163   1        _Nop();
 164   1        _Nop();
 165   1        _Nop();
 166   1        SCL = 0;               //清时钟线，钳住I2C总线以便继续接收
 167   1        _Nop();
 168   1        _Nop();
 169   1      }
 170          
 171          /*----------------------------------------------------------------
 172          非应答子函数
 173          原型:  void NoAck_I2c(void);
 174          
 175          ----------------------------------------------------------------*/
 176          void NoAck_I2c(void)
 177          {
 178   1        SDA = 1;
C51 COMPILER V9.00   AT24C256                                                              03/10/2016 16:30:10 PAGE 4   

 179   1        _Nop();
 180   1        _Nop();
 181   1        _Nop();
 182   1        SCL = 1;
 183   1        _Nop();
 184   1        _Nop();              //时钟低电平周期大于4μ
 185   1        _Nop();
 186   1        _Nop();
 187   1        _Nop();
 188   1        SCL = 0;                //清时钟线，钳住I2C总线以便继续接收
 189   1        _Nop();
 190   1        _Nop();
 191   1      }
 192          
 193          /*----------------------------------------------------------------
 194          向有子地址器件发送多字节数据函数
 195          函数原型: bit  ISendStr(unsigned char sla,unsigned char suba,ucahr *s,unsigned char no);
 196          功能:     从启动总线到发送地址，子地址,数据，结束总线的全过程,从器件
 197          地址sla，子地址suba，发送内容是s指向的内容，发送no个字节。
 198          如果返回1表示操作成功，否则操作有误。
 199          注意：    使用前必须已结束总线。
 200          ----------------------------------------------------------------*/
 201          bit ISendStr(unsigned char sla, unsigned int suba, unsigned char *s, unsigned char no)
 202          {
 203   1        unsigned char i;
 204   1        Start_I2c();               //启动总线
 205   1        SendByte(sla);             //发送器件地址
 206   1        if (ack == 0)return(0);
 207   1        SendByte(suba >> 8);            //发送器件子地址
 208   1        if (ack == 0)return(0);
 209   1        SendByte(suba);
 210   1        if (ack == 0)return(0);
 211   1        for (i = 0; i<no; i++)
 212   1        {
 213   2          SendByte(*s);            //发送数据
 214   2          if (ack == 0)return(0);
 215   2          s++;
 216   2        }
 217   1        Stop_I2c();                  //结束总线
 218   1        return(1);
 219   1      }
 220          
 221          
 222          /*----------------------------------------------------------------
 223          向有子地址器件读取多字节数据函数
 224          函数原型: bit  ISendStr(unsigned char sla,unsigned char suba,ucahr *s,unsigned char no);
 225          功能:     从启动总线到发送地址，子地址,读数据，结束总线的全过程,从器件
 226          地址sla，子地址suba，读出的内容放入s指向的存储区，读no个字节。
 227          如果返回1表示操作成功，否则操作有误。
 228          注意：    使用前必须已结束总线。
 229          ----------------------------------------------------------------*/
 230          bit IRcvStr(unsigned char sla, unsigned int suba, unsigned char *s, unsigned char no)
 231          {
 232   1        unsigned char i;
 233   1        Start_I2c();               //启动总线
 234   1        SendByte(sla);             //发送器件地址
 235   1        if (ack == 0)return(0);
 236   1        SendByte(suba >> 8);            //发送器件子地址
 237   1        if (ack == 0)return(0);
 238   1        SendByte(suba);            //发送器件子地址
 239   1        if (ack == 0)return(0);
 240   1        Start_I2c();
C51 COMPILER V9.00   AT24C256                                                              03/10/2016 16:30:10 PAGE 5   

 241   1        SendByte(sla + 1);
 242   1        if (ack == 0)return(0);
 243   1        for (i = 0; i<no - 1; i++)
 244   1        {
 245   2          *s = RcvByte();              //发送数据
 246   2          Ack_I2c();                //发送就答位 
 247   2          s++;
 248   2        }
 249   1        *s = RcvByte();
 250   1        NoAck_I2c();                 //发送非应位
 251   1        Stop_I2c();                    //结束总线
 252   1        return(1);
 253   1      }
 254          
 255          bit register_call_function(RF_def *pRF)
 256          {
 257   1        uint16_t addr;
 258   1        uint16_t i;
 259   1        RF_def RFtmp;
 260   1        uint16_t tmp = 0;
 261   1        addr = CALL_DATA_START;
 262   1      
 263   1        for (i = 0; i < CALL_NUMBER; i++)
 264   1        {
 265   2          IRcvStr(I2C_ADDRESS, addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 266   2      
 267   2          if (!(RFtmp.rf & 0xff000000))
 268   2          {
 269   3      
 270   3            if (return_Two_Menu_F8_E1() == 2)      //多键模式低位为0
 271   3            {
 272   4              RFtmp.rf &= 0x00fffff0;
 273   4              pRF->rf &= 0x00fffff0;
 274   4            }
 275   3      
 276   3            if (RFtmp.rf == pRF->rf)    //有相等RF在里面，重新覆盖
 277   3            {
 278   4              memcpy(Two_Menu_F1_E1, RFtmp.region, 4);
 279   4              Two_Menu_F1_E1[4] = 0;
 280   4              GD5800_select_chapter_new(SHIBAI);
 281   4              return 1;
 282   4            }
 283   3          }
 284   2          else
 285   2          {
 286   3            if (!tmp) tmp = addr;
 287   3          }
 288   2          addr += sizeof(RF_def);
 289   2        }
 290   1        ISendStr(I2C_ADDRESS, tmp, (uint8_t *)pRF, sizeof(RF_def));
 291   1        if (tmp != 0)
 292   1        {
 293   2          GD5800_select_chapter_new(CHENGGONG);
 294   2        }
 295   1        else
 296   1        {
 297   2          GD5800_select_chapter_new(SHIBAI);
 298   2          return 1;
 299   2        }
 300   1        //EEP_WriteBytes(tmp, (uint8_t *)pRF, sizeof(RF_def));
 301   1        return 0;
 302   1      }
C51 COMPILER V9.00   AT24C256                                                              03/10/2016 16:30:10 PAGE 6   

 303          
 304          
 305          bit register_host_function(RF_def *pRF)
 306          {
 307   1        uint16_t addr;
 308   1        uint16_t i;
 309   1        RF_def RFtmp;
 310   1        uint16_t tmp = 0;
 311   1        addr = HOST_DATA_START;
 312   1      
 313   1        for (i = 0; i < HOST_NUMBER; i++)
 314   1        {
 315   2          IRcvStr(I2C_ADDRESS, addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 316   2          //EEP_ReadBytes(addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 317   2      
 318   2          if (!(RFtmp.rf & 0xff000000))
 319   2          {
 320   3      
 321   3            if (return_Two_Menu_F8_E1() == 2)      //多键模式低位为0
 322   3            {
 323   4              RFtmp.rf &= 0x00fffff0;
 324   4              pRF->rf &= 0x00fffff0;
 325   4            }
 326   3      
 327   3            if (RFtmp.rf == pRF->rf)    //有相等RF在里面，重新覆盖
 328   3            {
 329   4              memcpy(Two_Menu_F1_E2, RFtmp.region, 4);
 330   4              Two_Menu_F1_E2[4] = 0;
 331   4              GD5800_select_chapter(SHIBAI);
 332   4              return 1;
 333   4            }
 334   3          }
 335   2          else
 336   2          {
 337   3            if (!tmp) tmp = addr;
 338   3          }
 339   2          addr += sizeof(RF_def);
 340   2        }
 341   1        ISendStr(I2C_ADDRESS, tmp, (uint8_t *)pRF, sizeof(RF_def));
 342   1        //EEP_WriteBytes(tmp, (uint8_t *)pRF, sizeof(RF_def));
 343   1        if (tmp != 0)
 344   1        {
 345   2          GD5800_select_chapter_new(CHENGGONG);
 346   2        }
 347   1        else
 348   1        {
 349   2          GD5800_select_chapter_new(SHIBAI);
 350   2          return 1;
 351   2        }
 352   1        return 0;
 353   1      }
 354          
 355          bit register_alarm_function(RF_def *pRF)
 356          {
 357   1        uint16_t addr;
 358   1        uint16_t i;
 359   1        RF_def RFtmp;
 360   1        uint16_t tmp = 0;
 361   1        addr = ALARM_DATA_START;
 362   1      
 363   1        for (i = 0; i < ALARM_NUMBER; i++)
 364   1        {
C51 COMPILER V9.00   AT24C256                                                              03/10/2016 16:30:10 PAGE 7   

 365   2          IRcvStr(I2C_ADDRESS, addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 366   2          //EEP_ReadBytes(addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 367   2      
 368   2          if (!(RFtmp.rf & 0xff000000))
 369   2          {
 370   3      
 371   3            if (return_Two_Menu_F8_E1() == 2)      //多键模式低位为0
 372   3            {
 373   4              RFtmp.rf &= 0x00fffff0;
 374   4              pRF->rf &= 0x00fffff0;
 375   4            }
 376   3      
 377   3            if (RFtmp.rf == pRF->rf)    //有相等RF在里面，重新覆盖
 378   3            {
 379   4              memcpy(Two_Menu_F1_E3, RFtmp.region, 4);
 380   4              Two_Menu_F1_E3[4] = 0;
 381   4              GD5800_select_chapter(SHIBAI);
 382   4              return 1;
 383   4            }
 384   3          }
 385   2          else
 386   2          {
 387   3            if (!tmp) tmp = addr;
 388   3          }
 389   2          addr += sizeof(RF_def);
 390   2        }
 391   1        ISendStr(I2C_ADDRESS, tmp, (uint8_t *)pRF, sizeof(RF_def));
 392   1        //EEP_WriteBytes(tmp, (uint8_t *)pRF, sizeof(RF_def));
 393   1        if (tmp != 0)
 394   1        {
 395   2          GD5800_select_chapter_new(CHENGGONG);
 396   2        }
 397   1        else
 398   1        {
 399   2          GD5800_select_chapter_new(SHIBAI);
 400   2          return 1;
 401   2        }
 402   1        return 0;
 403   1      }
 404          
 405          bit register_cancel_function(RF_def *pRF)
 406          {
 407   1        uint16_t addr;
 408   1        uint16_t i;
 409   1        RF_def RFtmp;
 410   1        uint16_t tmp = 0;
 411   1        addr = CANCEL_DATA_START;
 412   1      
 413   1        for (i = 0; i < CANCEL_NUMBER; i++)
 414   1        {
 415   2          IRcvStr(I2C_ADDRESS, addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 416   2          //EEP_ReadBytes(addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 417   2      
 418   2          if (!(RFtmp.rf & 0xff000000))
 419   2          {
 420   3      
 421   3            if (return_Two_Menu_F8_E1() == 2)      //多键模式低位为0
 422   3            {
 423   4              RFtmp.rf &= 0x00fffff0;
 424   4              pRF->rf &= 0x00fffff0;
 425   4            }
 426   3      
C51 COMPILER V9.00   AT24C256                                                              03/10/2016 16:30:10 PAGE 8   

 427   3            if (RFtmp.rf == pRF->rf)    //有相等RF在里面，重新覆盖
 428   3            {
 429   4              memcpy(Two_Menu_F1_E4, RFtmp.region, 4);
 430   4              Two_Menu_F1_E4[4] = 0;
 431   4              GD5800_select_chapter(SHIBAI);
 432   4              return 1;
 433   4            }
 434   3          }
 435   2          else
 436   2          {
 437   3            if (!tmp) tmp = addr;
 438   3          }
 439   2          addr += sizeof(RF_def);
 440   2        }
 441   1        ISendStr(I2C_ADDRESS, tmp, (uint8_t *)pRF, sizeof(RF_def));
 442   1        //EEP_WriteBytes(tmp, (uint8_t *)pRF, sizeof(RF_def));
 443   1        if (tmp != 0)
 444   1        {
 445   2          GD5800_select_chapter_new(CHENGGONG);
 446   2        }
 447   1        else
 448   1        {
 449   2          GD5800_select_chapter_new(SHIBAI);
 450   2          return 1;
 451   2        }
 452   1        return 0;
 453   1      }
 454          
 455          bit delete_call_function(unsigned char *buf)//buf为组码数组的指针
 456          {
 457   1        RF_def RFtmp;
 458   1        uint16_t addr = CALL_DATA_START;
 459   1        uint16_t i;
 460   1        unsigned char dofly[32] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
             - 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
 461   1        if (*(volatile uint32_t*)buf == 0x00000000ul)
 462   1        {
 463   2          for (i = 0; i<128; i++)
 464   2          {
 465   3            ISendStr(I2C_ADDRESS, addr + (i << 5), dofly, 32);                   //写入24c02
 466   3            delay10ms();
 467   3          }
 468   2      
 469   2        }
 470   1        else
 471   1        {
 472   2          for (i = 0; i < CALL_NUMBER; i++)
 473   2          {
 474   3            IRcvStr(I2C_ADDRESS, addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 475   3            //EEP_ReadBytes(addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 476   3            if (!(RFtmp.rf & 0xff000000ul))
 477   3            {
 478   4              if (*(volatile uint32_t*)buf == *(volatile uint32_t*)(RFtmp.region))
 479   4              {
 480   5                memset(&RFtmp, 0xff, sizeof(RF_def));
 481   5                ISendStr(I2C_ADDRESS, addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 482   5                //EEP_WriteBytes(addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 483   5                break;
 484   5              }
 485   4            }
 486   3            addr += sizeof(RF_def);
 487   3          }
C51 COMPILER V9.00   AT24C256                                                              03/10/2016 16:30:10 PAGE 9   

 488   2        }
 489   1        return 0;
 490   1      }
 491          
 492          bit delete_host_function(unsigned char *buf)//buf为组码数组的指针
 493          {
 494   1        RF_def RFtmp;
 495   1        uint16_t addr = HOST_DATA_START;
 496   1        uint16_t i;
 497   1        unsigned char dofly[32] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
             - 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
 498   1        if (*(volatile uint32_t*)buf == 0x00000000ul)
 499   1        {
 500   2          for (i = 0; i<8; i++)
 501   2          {
 502   3            ISendStr(I2C_ADDRESS, addr+( i << 5), dofly, 32);                   //写入24c02
 503   3            delay10ms();
 504   3          }
 505   2      
 506   2        }
 507   1        else
 508   1        {
 509   2          for (i = 0; i < HOST_NUMBER; i++)
 510   2          {
 511   3            IRcvStr(I2C_ADDRESS, addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 512   3            //EEP_ReadBytes(addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 513   3            if (!(RFtmp.rf & 0xff000000ul))
 514   3            {
 515   4              if (*(volatile uint32_t*)buf == *(volatile uint32_t*)(RFtmp.region))
 516   4              {
 517   5                memset(&RFtmp, 0xff, sizeof(RF_def));
 518   5                ISendStr(I2C_ADDRESS, addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 519   5                //EEP_WriteBytes(addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 520   5                break;
 521   5              }
 522   4            }
 523   3            addr += sizeof(RF_def);
 524   3          }
 525   2        }
 526   1        return 0;
 527   1      }
 528          
 529          bit delete_alarm_function(unsigned char *buf)//buf为组码数组的指针
 530          {
 531   1        RF_def RFtmp;
 532   1        uint16_t addr = ALARM_DATA_START;
 533   1        uint16_t i;
 534   1        unsigned char dofly[32] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
             - 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
 535   1        if (*(volatile uint32_t*)buf == 0x00000000ul)
 536   1        {
 537   2          for (i = 0; i<16; i++)
 538   2          {
 539   3            ISendStr(I2C_ADDRESS, addr + (i << 5), dofly, 32);                   //写入24c02
 540   3            delay10ms();
 541   3          }
 542   2      
 543   2        }
 544   1        else
 545   1        {
 546   2          for (i = 0; i < ALARM_NUMBER; i++)
 547   2          {
C51 COMPILER V9.00   AT24C256                                                              03/10/2016 16:30:10 PAGE 10  

 548   3            IRcvStr(I2C_ADDRESS, addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 549   3            //  EEP_ReadBytes(addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 550   3            if (!(RFtmp.rf & 0xff000000ul))
 551   3            {
 552   4              if (*(volatile uint32_t*)buf == *(volatile uint32_t*)(RFtmp.region))
 553   4              {
 554   5                memset(&RFtmp, 0xff, sizeof(RF_def));
 555   5                ISendStr(I2C_ADDRESS, addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 556   5                //EEP_WriteBytes(addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 557   5                break;
 558   5              }
 559   4            }
 560   3            addr += sizeof(RF_def);
 561   3          }
 562   2        }
 563   1        return 0;
 564   1      }
 565          
 566          bit delete_cancel_function(unsigned char *buf)//buf为组码数组的指针
 567          {
 568   1        RF_def RFtmp;
 569   1        uint16_t addr = CANCEL_DATA_START;
 570   1        uint16_t i;
 571   1        unsigned char dofly[32] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
             - 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
 572   1        if (*(volatile uint32_t*)buf == 0x00000000ul)
 573   1        {
 574   2          for (i = 0; i<16; i++)
 575   2          {
 576   3            ISendStr(I2C_ADDRESS, addr + (i << 5), dofly, 32);                   //写入24c02
 577   3            delay10ms();
 578   3          }
 579   2      
 580   2        }
 581   1        else
 582   1        {
 583   2          for (i = 0; i < CANCEL_NUMBER; i++)
 584   2          {
 585   3            IRcvStr(I2C_ADDRESS, addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 586   3            //EEP_ReadBytes(addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 587   3            if (!(RFtmp.rf & 0xff000000ul))
 588   3            {
 589   4              if (*(volatile uint32_t*)buf == *(volatile uint32_t*)(RFtmp.region))
 590   4              {
 591   5                memset(&RFtmp, 0xff, sizeof(RF_def));
 592   5                ISendStr(I2C_ADDRESS, addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 593   5                //EEP_WriteBytes(addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 594   5                break;
 595   5              }
 596   4            }
 597   3            addr += sizeof(RF_def);
 598   3          }
 599   2        }
 600   1        return 0;
 601   1      }
 602          
 603          void Delete_all_data(void)
 604          {
 605   1      //  uint8_t i,j;
 606   1      //  int8_t buf[32] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
             -0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
 607   1      //  uint16_t addr = 0;
C51 COMPILER V9.00   AT24C256                                                              03/10/2016 16:30:10 PAGE 11  

 608   1      //  int8_t buf1[32];
 609   1      ////  memset(buf, 0xff, sizeof(buf));
 610   1      //  addr = 0;
 611   1      //  for (i = 0; i<168; i++)
 612   1      //  { 
 613   1      //    addr = i << 5;
 614   1      //    ISendStr(I2C_ADDRESS, addr, buf, 32);
 615   1      //    delay10ms();
 616   1      //    //EEP_WriteBytes(addr, buf, sizeof(buf));
 617   1      //    //addr += 32;
 618   1      //  }
 619   1      //  uart_printf("24c read:");
 620   1      //  for (i = 0; i<168; i++)
 621   1      //  {
 622   1      //    IRcvStr(I2C_ADDRESS, addr, buf, 32);
 623   1      //    delay10ms();
 624   1      //    for (j = 0; j < 32; j++)
 625   1      //    {
 626   1      //      uart_printf("%02x ", (unsigned int)buf[j]);
 627   1      //    }
 628   1      //    uart_printf("\n\r");
 629   1      //    //EEP_WriteBytes(addr, buf, sizeof(buf));
 630   1      //    addr += sizeof(buf);
 631   1      //  }
 632   1      
 633   1        unsigned char dofly[32] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
             - 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
 634   1        unsigned int k;
 635   1        for (k = 0; k<168; k++)
 636   1        {
 637   2          ISendStr(I2C_ADDRESS, 0 + (k << 5), dofly, 32);                   //写入24c02
 638   2          delay10ms();
 639   2        }
 640   1      }
 641          
 642          
 643          int8_t Find_RF_EEPROM_Call(RF_def *p, uint32_t dat)
 644          {
 645   1        RF_def RFtmp;
 646   1        uint16_t addr;
 647   1        uint16_t i;
 648   1        addr = CALL_DATA_START;
 649   1      
 650   1        for (i = 0; i<CALL_NUMBER; i++)
 651   1        {
 652   2          IRcvStr(I2C_ADDRESS, addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 653   2          //EEP_ReadBytes(addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 654   2      
 655   2          if (return_Two_Menu_F8_E1() == 2)      //多键模式低位为0
 656   2          {
 657   3            RFtmp.rf &= 0x00fffff0;
 658   3            dat &= 0x00fffff0;
 659   3          }
 660   2      
 661   2          if (RFtmp.rf == dat)
 662   2          {
 663   3            memcpy(p, &RFtmp, sizeof(RF_def));
 664   3            return 1;
 665   3          }
 666   2          addr += sizeof(RF_def);
 667   2        }
 668   1        return 0;
C51 COMPILER V9.00   AT24C256                                                              03/10/2016 16:30:10 PAGE 12  

 669   1      }
 670          
 671          int8_t Find_RF_EEPROM_Host(RF_def *p, uint32_t dat)
 672          {
 673   1        RF_def RFtmp;
 674   1        uint16_t addr;
 675   1        uint16_t i;
 676   1        addr = HOST_DATA_START;
 677   1      
 678   1        for (i = 0; i<HOST_NUMBER; i++)
 679   1        {
 680   2          IRcvStr(I2C_ADDRESS, addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 681   2          //EEP_ReadBytes(addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 682   2      
 683   2          if (return_Two_Menu_F8_E1() == 2)      //多键模式低位为0
 684   2          {
 685   3            RFtmp.rf &= 0x00fffff0;
 686   3            dat &= 0x00fffff0;
 687   3          }
 688   2      
 689   2          if (RFtmp.rf == dat)
 690   2          {
 691   3            memcpy(p, &RFtmp, sizeof(RF_def));
 692   3            return 1;
 693   3          }
 694   2          addr += sizeof(RF_def);
 695   2        }
 696   1        return 0;
 697   1      }
 698          
 699          int8_t Find_RF_EEPROM_Alarm(RF_def *p, uint32_t dat)
 700          {
 701   1        RF_def RFtmp;
 702   1        uint16_t addr;
 703   1        uint16_t i;
 704   1        addr = ALARM_DATA_START;
 705   1      
 706   1        for (i = 0; i<ALARM_NUMBER; i++)
 707   1        {
 708   2          IRcvStr(I2C_ADDRESS, addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 709   2          //EEP_ReadBytes(addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 710   2      
 711   2          if (return_Two_Menu_F8_E1() == 2)      //多键模式低位为0
 712   2          {
 713   3            RFtmp.rf &= 0x00fffff0;
 714   3            dat &= 0x00fffff0;
 715   3          }
 716   2      
 717   2          if (RFtmp.rf == dat)
 718   2          {
 719   3            memcpy(p, &RFtmp, sizeof(RF_def));
 720   3            return 1;
 721   3          }
 722   2          addr += sizeof(RF_def);
 723   2        }
 724   1        return 0;
 725   1      }
 726          
 727          int8_t Find_RF_EEPROM_Cancel(RF_def *p, uint32_t dat)
 728          {
 729   1        RF_def RFtmp;
 730   1        uint16_t addr;
C51 COMPILER V9.00   AT24C256                                                              03/10/2016 16:30:10 PAGE 13  

 731   1        uint16_t i;
 732   1        addr = CANCEL_DATA_START;
 733   1      
 734   1        for (i = 0; i<CANCEL_NUMBER; i++)
 735   1        {
 736   2          IRcvStr(I2C_ADDRESS, addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 737   2          //EEP_ReadBytes(addr, (uint8_t *)&RFtmp, sizeof(RF_def));
 738   2      
 739   2          if (return_Two_Menu_F8_E1() == 2)      //多键模式低位为0
 740   2          {
 741   3            RFtmp.rf &= 0x00fffff0;
 742   3            dat &= 0x00fffff0;
 743   3          }
 744   2      
 745   2          if (RFtmp.rf == dat)
 746   2          {
 747   3            memcpy(p, &RFtmp, sizeof(RF_def));
 748   3            return 1;
 749   3          }
 750   2          addr += sizeof(RF_def);
 751   2        }
 752   1        return 0;
 753   1      }
 754          
 755          int8_t Find_RF_EEPROM(RF_def *p, uint32_t dat)
 756          {
 757   1        if (Find_RF_EEPROM_Cancel(p, dat))
 758   1        {
 759   2          return 1;
 760   2        }
 761   1        else if (Find_RF_EEPROM_Alarm(p, dat))
 762   1        {
 763   2          return 2;
 764   2        }
 765   1        else if (Find_RF_EEPROM_Call(p, dat))
 766   1        {
 767   2          return 3;
 768   2        }
 769   1        else
 770   1        {
 771   2          return 0;
 772   2        }
 773   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3821    ----
   CONSTANT SIZE    =    160    ----
   XDATA SIZE       =     16     387
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
