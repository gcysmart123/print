C51 COMPILER V9.00   GD5800                                                                03/10/2016 16:30:11 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE GD5800
OBJECT MODULE PLACED IN gd5800.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\gd5800.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT(
                    -.\gd5800.lst) TABS(2) OBJECT(gd5800.obj)

line level    source

   1          #include "gd5800.h"
   2          #include "usart.h"
   3          #include "menu.h"
   4          #include "key.h"
   5          
   6          void GD5800_initialization(void)
   7          {
   8   1        /***********************/
   9   1        Usart2_SendData(0x7E);       /***frame command ****/
  10   1        Usart2_SendData(0X03);
  11   1        Usart2_SendData(0X33);
  12   1        Usart2_SendData(0x04);
  13   1        Usart2_SendData(0XEF);
  14   1        /***********************/
  15   1      }
  16          
  17          void GD5800_select_chapter(unsigned int chapter_number)
  18          {
  19   1        Usart2_SendData(0x7E);       /***frame command ****/
  20   1        Usart2_SendData(0X04);
  21   1        Usart2_SendData(0X41);
  22   1        Usart2_SendData(chapter_number >> 8);
  23   1        Usart2_SendData(chapter_number);
  24   1        Usart2_SendData(0XEF);
  25   1      
  26   1      }
  27          
  28          void GD5800_sound_volume(unsigned char volume)
  29          {
  30   1        Usart2_SendData(0x7E);       /***frame command ****/
  31   1        Usart2_SendData(0X03);
  32   1        Usart2_SendData(0X31);
  33   1        Usart2_SendData(volume);
  34   1        Usart2_SendData(0XEF);
  35   1      
  36   1      }
  37          
  38          void GD5800_stop_music(void)
  39          {
  40   1        Usart2_SendData(0x7E);       /***frame command ****/
  41   1        Usart2_SendData(0X02);
  42   1        Usart2_SendData(0x0E);
  43   1        Usart2_SendData(0XEF);
  44   1      }
  45          
  46          void GD5800_play_music(void)
  47          {
  48   1        Usart2_SendData(0x7E);       /***frame command ****/
  49   1        Usart2_SendData(0X02);
  50   1        Usart2_SendData(0x01);
  51   1        Usart2_SendData(0XEF);
  52   1      }
  53          
  54          void submenuf6_1_voiceselect(unsigned char report_mode, unsigned char *report_number)
C51 COMPILER V9.00   GD5800                                                                03/10/2016 16:30:11 PAGE 2   

  55          {
  56   1        unsigned char *number;
  57   1        number = report_number;
  58   1        if (report_mode <= NOT_REPORT_C)
  59   1        {
  60   2          if (report_mode <= NOT_REPORT)
  61   2          {
  62   3            GD5800_select_chapter(*(number + 2) + ZERO);/*呼叫号数百位*/
  63   3          }
  64   2          else
  65   2          {
  66   3            if (*(number + 2) != 0)
  67   3            {
  68   4              GD5800_select_chapter(*(number + 2) + ZERO);
  69   4              GD5800_select_chapter(HUNDRED);/*hundred 的声音*/
  70   4              GD5800_select_chapter(AND);/*and的声音*/
  71   4            }
  72   3          }
  73   2      
  74   2          if (report_mode <= NOT_REPORT)
  75   2          {
  76   3            GD5800_select_chapter(*(number + 3) + ZERO);
  77   3          }
  78   2          else
  79   2          {
  80   3            if (*(number + 3) != 0)
  81   3            {
  82   4              if (*(number + 3) == 1)
  83   4              {
  84   5                if (*(number + 4) == 0) //10
  85   5                {
  86   6                  GD5800_select_chapter(TEN);
  87   6                }
  88   5                else//11-19
  89   5                {
  90   6                  GD5800_select_chapter(*(number + 4) + ELEVEN - 1);
  91   6                }
  92   5              }
  93   4              else//20-90
  94   4              {
  95   5                GD5800_select_chapter(*(number + 3) + TWENTY - 2);
  96   5              }
  97   4            }
  98   3          }
  99   2      
 100   2          if (report_mode <= NOT_REPORT)
 101   2          {
 102   3            GD5800_select_chapter(*(number + 4) + ZERO);
 103   3          }
 104   2          else
 105   2          {
 106   3            if (*(number + 4) != 0 && *(number + 3) != 1)
 107   3            {
 108   4              GD5800_select_chapter(*(number + 4) + ZERO);
 109   4      
 110   4            }
 111   3          }
 112   2        }
 113   1      
 114   1        else
 115   1        {
 116   2          switch (report_mode)
C51 COMPILER V9.00   GD5800                                                                03/10/2016 16:30:11 PAGE 3   

 117   2          {
 118   3          case DINGDONG_type:
 119   3            GD5800_select_chapter(DINGDONG);
 120   3            break;
 121   3          case YINYUEYI_type:
 122   3            GD5800_select_chapter(YINGYUEYI);
 123   3            break;
 124   3          case YINYUEER_type:
 125   3            GD5800_select_chapter(YINGYUEER);
 126   3            break;
 127   3          case EMERGENCY_type:
 128   3            GD5800_select_chapter(BAOJING);
 129   3            break;
 130   3          default:break;
 131   3          }
 132   2        }
 133   1      }
 134          
 135          /*sjz********************************************************************************8****
 136          void submenuf6_1(unsigned char report_mode,unsigned char *report_number,unsigned int call_type)
 137          parameters:
 138          report_mode: 0----simple report   1----complicated report  2-----do not need report type
 139          3----"dingdong" voice  4-----"dingdang" voice  5 ----emergency voice
 140          the pointer of report_number:   has three digital number,the range is from 0 to 999
 141          and the pointer is from the array[1] to array[3]
 142          call_type:   1----restaurant mode  2-----hospital mode
 143          3----bank mode  etc
 144          key_value:
 145          case 0:cancel;
 146          case 1:temp_buff[6]=0x0b;break;
 147          case 2:temp_buff[6]=0x0d;break;
 148          case 3:temp_buff[6]=0x0c;break;
 149          case 5:temp_buff[6]=0x13;break;
 150          case 6:temp_buff[6]=0x0e;break;
 151          case 7:temp_buff[6]=0x0f;break;
 152          *****************************************************************************************/
 153          void submenuf6_1(unsigned char report_mode, unsigned char *report_number, unsigned int call_type, unsigned
             - char key_value)
 154          {
 155   1        unsigned int mode;
 156   1        unsigned char *number;
 157   1        unsigned int  type;
 158   1        unsigned char key;
 159   1        unsigned char Two_Menu_F7_E1_temp = 0;
 160   1        unsigned char Two_Menu_F6_E7_temp = 0;
 161   1        Two_Menu_F7_E1_temp = return_Two_Menu_F7_E1();
 162   1        Two_Menu_F6_E7_temp = return_Two_Menu_F6_E7();
 163   1        mode = report_mode;
 164   1        number = report_number;
 165   1        type = call_type;
 166   1        key = key_value;
 167   1        if (mode <= NOT_REPORT_C )
 168   1        {
 169   2          GD5800_select_chapter(DINGDONG);
 170   2      #ifdef  AWAIT_VOICE_PATCH
 171   2          if (key == 15)//防区号是否当前缀
 172   2          {
 173   3            GD5800_select_chapter(QING);
 174   3          }
 175   2      #endif
 176   2          if (Two_Menu_F6_E7_temp == 0 || (Two_Menu_F6_E7_temp == 1 && mode >= COMPLICATED_REPORT))
 177   2          {
C51 COMPILER V9.00   GD5800                                                                03/10/2016 16:30:11 PAGE 4   

 178   3            GD5800_select_chapter(HAO);
 179   3          }
 180   2      #ifdef  AWAIT_VOICE_PATCH
 181   2          if (key != 15)//防区号是否当前缀
 182   2          {
 183   3      #endif
 184   3            if (*(number + 1) <= 9)
 185   3            {
 186   4              if (report_mode <= NOT_REPORT)
 187   4              {
 188   5                GD5800_select_chapter(*(number + 1) + ZERO);
 189   5              }
 190   4              else
 191   4              {
 192   5                if (*(number + 1) != 0)
 193   5                {
 194   6                  GD5800_select_chapter(*(number + 1) + ZERO);
 195   6                  GD5800_select_chapter(THOUSAND);
 196   6                }
 197   5              }
 198   4      
 199   4            }
 200   3            else if (*(number + 1) <= 15 && *(number + 1) >= 10)
 201   3            {
 202   4              GD5800_select_chapter(*(number + 1) + ZIMU_A - 10);
 203   4            }
 204   3            else
 205   3            {
 206   4              switch (*(number + 1))
 207   4              {
 208   5              case 16:GD5800_select_chapter(ZIMU_H); break;//H
 209   5              case 17:GD5800_select_chapter(ZIMU_L); break;//L
 210   5              case 18:GD5800_select_chapter(ZIMU_O); break;//O
 211   5              case 19:GD5800_select_chapter(ZIMU_P); break;//P
 212   5              case 20:GD5800_select_chapter(ZIMU_U); break;//U
 213   5              default:break;
 214   5              }
 215   4            }
 216   3      #ifdef  AWAIT_VOICE_PATCH
 217   3          }
 218   2      #endif
 219   2          
 220   2          submenuf6_1_voiceselect(mode, number);
 221   2      
 222   2          if (Two_Menu_F6_E7_temp == 1 && report_mode <= NOT_REPORT)
 223   2          {
 224   3            GD5800_select_chapter(HAO);
 225   3          }
 226   2      
 227   2          if (key == 15)
 228   2          {
 229   3      #ifdef  AWAIT_VOICE_PATCH
 230   3            GD5800_select_chapter(DAO);
 231   3      
 232   3            if (*(number + 1) <= 9)
 233   3            {
 234   4              GD5800_select_chapter(*(number + 1) + ZERO);
 235   4            }
 236   3            else if (*(number + 1) <= 15 && *(number + 1) >= 10)
 237   3            {
 238   4              GD5800_select_chapter(*(number + 1) + ZIMU_A - 10);
 239   4            }
C51 COMPILER V9.00   GD5800                                                                03/10/2016 16:30:11 PAGE 5   

 240   3            else
 241   3            {
 242   4              switch (*(number + 1))
 243   4              {
 244   5              case 16:GD5800_select_chapter(ZIMU_H); break;//H
 245   5              case 17:GD5800_select_chapter(ZIMU_L); break;//L
 246   5              case 18:GD5800_select_chapter(ZIMU_O); break;//O
 247   5              case 19:GD5800_select_chapter(ZIMU_P); break;//P
 248   5              case 20:GD5800_select_chapter(ZIMU_U); break;//U
 249   5              default:break;
 250   5              }
 251   4            }
 252   3      #endif
 253   3            GD5800_select_chapter(GUITAI);
 254   3          }
 255   2          else if (mode != NOT_REPORT && mode != NOT_REPORT_C)
 256   2          {
 257   3            if (type < 50)
 258   3            {
 259   4              GD5800_select_chapter(type + QUXIAO);
 260   4            }
 261   3            else if (type == BAOJING_1)
 262   3            {
 263   4              GD5800_select_chapter(BAOJING);
 264   4            }     
 265   3          }
 266   2        }
 267   1        else
 268   1        {
 269   2          if (type == BAOJING_1 || type == BAOJING-QUXIAO)
 270   2          {
 271   3            GD5800_select_chapter(BAOJING);
 272   3          }
 273   2          else
 274   2          {
 275   3            submenuf6_1_voiceselect(mode, number);
 276   3          }
 277   2        }
 278   1      }
 279          
 280          void GD5800_select_chapter_new(unsigned int chapter_number)
 281          {
 282   1      tofun94:
 283   1        usart2_enable = 1;
 284   1        usart2_num = 0;
 285   1        usart2_right = 0;
 286   1        GD5800_select_chapter(chapter_number);
 287   1        delay10ms();
 288   1        delay10ms();
 289   1        delay10ms();
 290   1        delay10ms();
 291   1        if (usart2_right != 1)
 292   1          goto tofun94;
 293   1        set_sound_table(0);
 294   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1136    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      26
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.00   GD5800                                                                03/10/2016 16:30:11 PAGE 6   

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
