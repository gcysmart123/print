C51 COMPILER V9.00   PCA                                                                   03/10/2016 16:30:11 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE PCA
OBJECT MODULE PLACED IN pca.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\pca.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT(.\p
                    -ca.lst) TABS(2) OBJECT(pca.obj)

line level    source

   1          #include "pca.h"
   2          
   3          unsigned char flag;
   4          unsigned int count,endcount;
   5          bit OP;
   6          
   7          WORD value;
   8          WORD value_send_delay;
   9          
  10             
  11          //CPA 终端服务程序
  12          void PCA_isr() interrupt 7 using 1
  13          { 
  14   1            CCF0 = 0;                       //清中断标志
  15   1            CCAP0L = value;
  16   1            CCAP0H = value >> 8;            //更新比较值 520us
  17   1            value += T100Hz;
  18   1            count++;
  19   1            if (flag == 1)
  20   1      
  21   1            {
  22   2      
  23   2              OP = 1;
  24   2      
  25   2            }
  26   1      
  27   1            else
  28   1      
  29   1            {
  30   2      
  31   2              OP = 0;
  32   2      
  33   2            }
  34   1      
  35   1            P12 = OP;
  36   1          
  37   1          
  38   1          
  39   1      }
  40          //CPA 初始化
  41          void pca_timer_init()
  42          {
  43   1        count = 0;
  44   1      
  45   1          flag = 0;
  46   1      
  47   1          OP = 0;
  48   1      
  49   1        P35 = 0;
  50   1      
  51   1          EA = 1;
  52   1      
  53   1        ACC = P_SW1;
  54   1          ACC &= ~(CCP_S0 | CCP_S1);      //CCP_S0=0 CCP_S1=0
C51 COMPILER V9.00   PCA                                                                   03/10/2016 16:30:11 PAGE 2   

  55   1          P_SW1 = ACC;                    //(P1.2/ECI, P1.1/CCP0, P1.0/CCP1, P3.7/CCP2)
  56   1          
  57   1          CCON = 0;                       //初始化PCA控制寄存器
  58   1                                          //PCA定时器停止
  59   1                                          //清除CF标志
  60   1                                          //清除模块中断标志
  61   1          CL = 0;                         //复位PCA寄存器
  62   1          CH = 0;
  63   1          CMOD = 0x00;                    //设置PCA时钟源
  64   1                                          //禁止PCA定时器溢出中断
  65   1        value_send_delay = T20Hz;
  66   1      
  67   1        value = T100Hz;
  68   1          CCAP0L = value;
  69   1          CCAP0H = value >> 8;            //初始化PCA模块0
  70   1          value += T100Hz;
  71   1          CCAPM0 = 0x49;                  //PCA模块0为16位定时器模式
  72   1      
  73   1        CR = 1;
  74   1      }
  75          
  76          void SendIRdata(unsigned char id_data_3,unsigned char id_data_2,unsigned char id_data_1)
  77          
  78          {
  79   1      
  80   1        int i;
  81   1      
  82   1        char id_data;
  83   1      
  84   1        //发送同步头
  85   1      
  86   1        endcount=1;
  87   1      
  88   1        flag=1;
  89   1        count=0;
  90   1      
  91   1        do{}while(count<endcount);
  92   1      
  93   1      
  94   1        endcount=31;
  95   1      
  96   1        flag=0;
  97   1      
  98   1        count=0;
  99   1      
 100   1        do{}while(count<endcount);
 101   1      
 102   1        //发送bit23-bit16
 103   1      
 104   1        id_data=id_data_3;
 105   1      
 106   1        for(i=0;i<8;i++)
 107   1      
 108   1        {
 109   2            if(id_data&0x80)  //判断二进制数高位为1还是0
 110   2      
 111   2           {
 112   3          endcount=3;  //1为宽的高电平
 113   3          flag=1;
 114   3           }
 115   2      
 116   2          else
C51 COMPILER V9.00   PCA                                                                   03/10/2016 16:30:11 PAGE 3   

 117   2      
 118   2           {
 119   3      
 120   3           endcount=1;   //0为窄的高电平
 121   3          flag=1;
 122   3           }
 123   2      
 124   2          
 125   2      
 126   2          count=0;
 127   2      
 128   2          do{}while(count<endcount);
 129   2        
 130   2        endcount=4-endcount;
 131   2      
 132   2        flag=0;
 133   2      
 134   2        count=0;
 135   2      
 136   2        do{}while(count<endcount);
 137   2      
 138   2          id_data=id_data<<1;
 139   2      
 140   2        }
 141   1      
 142   1          //发送bit15-bit8
 143   1      
 144   1        id_data=id_data_2;
 145   1      
 146   1        for(i=0;i<8;i++)
 147   1      
 148   1        {
 149   2           if(id_data&0x80)
 150   2      
 151   2           {
 152   3      
 153   3              endcount=3;
 154   3          flag=1;
 155   3           }
 156   2      
 157   2           else
 158   2      
 159   2           {
 160   3      
 161   3             endcount=1;
 162   3           flag=1;
 163   3           }
 164   2      
 165   2           flag=1;
 166   2      
 167   2           count=0;
 168   2      
 169   2           do{}while(count<endcount);
 170   2      
 171   2          endcount=4-endcount;
 172   2      
 173   2        flag=0;
 174   2      
 175   2        count=0;
 176   2      
 177   2        do{}while(count<endcount);
 178   2      
C51 COMPILER V9.00   PCA                                                                   03/10/2016 16:30:11 PAGE 4   

 179   2           id_data=id_data<<1;
 180   2      
 181   2        }
 182   1      
 183   1        //发送bit8-bit0
 184   1      
 185   1        id_data=id_data_1;
 186   1      
 187   1        for(i=0;i<8;i++)
 188   1      
 189   1        {
 190   2           if(id_data&0x80)
 191   2      
 192   2           {
 193   3      
 194   3               endcount=3;
 195   3           flag=1;
 196   3           }
 197   2      
 198   2           else
 199   2      
 200   2           {
 201   3      
 202   3             endcount=1;
 203   3          flag=1;
 204   3           }
 205   2      
 206   2           flag=1;
 207   2      
 208   2           count=0;
 209   2      
 210   2           do{}while(count<endcount);
 211   2      
 212   2          endcount=4-endcount;
 213   2      
 214   2        flag=0;
 215   2      
 216   2        count=0;
 217   2      
 218   2        do{}while(count<endcount);
 219   2         
 220   2           id_data=id_data<<1;
 221   2      
 222   2        }
 223   1      }
 224          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    633    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      9       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
