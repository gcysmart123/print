C51 COMPILER V9.00   TIMER                                                                 03/10/2016 16:30:10 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN timer.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Receiver\timer.c LARGE BROWSE INCDIR(.\Receiver) DEBUG OBJECTEXTEND PRINT(.
                    -\timer.lst) TABS(2) OBJECT(timer.obj)

line level    source

   1          #include "timer.h"
   2          #include "key.h"
   3          #include "menu.h"
   4          #include "ev1527.h"
   5          #include "global.h"
   6          
   7          unsigned char await_number = 0;      //待机时刻计算50MS次数变量
   8          unsigned char await_number_table = 0;//0.5秒标志变量
   9          
  10          unsigned char main_press_time_table = 0;//main计算时间变量跟标志位
  11          unsigned char main_press_time = 0;
  12          
  13          unsigned char again_and_again_time = 0;// 判断重复解码所需要的计算时间变量
  14          
  15          unsigned char logout_cycle_number = 0; //销号 循环 计数变量以及标志位
  16          unsigned char logout_cycle_table = 0;
  17          
  18          unsigned char return_standby_time = 0;//一段时间未操作  返回待机界面
  19          
  20          unsigned char second_times = 0;
  21          
  22          unsigned char fd_table = 0;
  23          
  24          unsigned char filter_main = 0;
  25          unsigned char filter_other = 0;
  26          
  27          unsigned char second_filter_time = 0;
  28          unsigned char second_filter_table = 0;
  29          
  30          void Init_Timer0(void)
  31          {
  32   1        TMOD |= 0x01;   //使用模式1，16位定时器，使用"|"符号可以在使用多个定时器时不受影响  
  33   1        TH0 = (65536 - TIMER50MS) >> 8; //重新赋值 5ms
  34   1        TL0 = (65536 - TIMER50MS) & 0xff;
  35   1        EA = 1;            //总中断打开
  36   1        ET0 = 1;           //定时器中断打开
  37   1        TR0 = 1;           //定时器开关打开
  38   1      }
  39          
  40          void Init_Timer1(void) 
  41          {
  42   1        TMOD |= 0x10;   //使用模式1，16位定时器，使用"|"符号可以在使用多个定时器时不受影响  
  43   1        TH1 = (65536 - 100) >> 8; //重新赋值 100us
  44   1        TL1 = (65536 - 100) & 0xff;
  45   1        EA = 1;            //总中断打开
  46   1        ET1 = 1;           //定时器中断打开
  47   1        //TR1=1;           //定时器开关打开
  48   1      }
  49          
  50          void Timer0_isr(void) interrupt 1  //定时器0中断服务程序
  51          {
  52   1        unsigned char func_index_temp = 0;
  53   1        unsigned char Two_Menu_FC_E1_temp = 0;
  54   1        TF0 = 0;
C51 COMPILER V9.00   TIMER                                                                 03/10/2016 16:30:10 PAGE 2   

  55   1        TH0 = (65536 - TIMER50MS) >> 8;     //重新赋值 50ms
  56   1        TL0 = (65536 - TIMER50MS) & 0xff;
  57   1        func_index_temp = return_func_index();
  58   1        Two_Menu_FC_E1_temp = return_Two_Menu_FC_E1();
  59   1        //if (func_index_temp == MENU_STANDBY || func_index_temp == TWO_MENU_F0_YEAR || func_index_temp == TWO_ME
             -NU_F0_MOUTH 
  60   1        //  || func_index_temp == TWO_MENU_F0_DAY || func_index_temp == TWO_MENU_F0_WEEK || func_index_temp == TWO
             -_MENU_F0_HOUR
  61   1        //  || func_index_temp == TWO_MENU_F0_MINUTE || func_index_temp == TWO_MENU_F1_E1_D1 || func_index_temp ==
             - TWO_MENU_F1_E1_D2
  62   1        //  || func_index_temp == TWO_MENU_F1_E1_D3 || func_index_temp == TWO_MENU_F1_E1_D4 || func_index_temp == 
             -TWO_MENU_F1_E2_D1
  63   1        //  || func_index_temp == TWO_MENU_F1_E2_D2 || func_index_temp == TWO_MENU_F1_E2_D3 || func_index_temp == 
             -TWO_MENU_F1_E2_D4 
  64   1        //  )
  65   1        if (1)
  66   1        {
  67   2          await_number++;
  68   2          if (await_number == 10)
  69   2          {
  70   3            await_number_table++;
  71   3            fd_table++;
  72   3            await_number = 0;
  73   3            if (filter_main != 0)
  74   3            {
  75   4              filter_main--;
  76   4            }
  77   3      
  78   3          }
  79   2          if (await_number_table >= 4)//确保程序正确延时
  80   2          {
  81   3            await_number_table = 0;
  82   3          }   
  83   2          if (fd_table >= 24)
  84   2          {
  85   3            fd_table = 0;
  86   3          }
  87   2          if (filter_other != 0)
  88   2          {
  89   3            filter_other--;
  90   3          }
  91   2        }
  92   1      
  93   1        if (main_press_time_table == 1) //菜单键按下时间标志
  94   1        {
  95   2          main_press_time++;      //计算菜单键按下时间长度变量
  96   2        }
  97   1      
  98   1        if (return_again_and_again_decoder_table() == 1)
  99   1        {
 100   2          again_and_again_time++;
 101   2          if (again_and_again_time >120)
 102   2          {
 103   3            clear_again_and_again_decoder_table();
 104   3            again_and_again_time = 0;
 105   3          }
 106   2        }
 107   1      
 108   1        if (second_filter_table == 1)
 109   1        {
 110   2          second_filter_time++;
 111   2          if (second_filter_time >120)
C51 COMPILER V9.00   TIMER                                                                 03/10/2016 16:30:10 PAGE 3   

 112   2          {
 113   3            second_filter_table = 0;
 114   3            second_filter_time = 0;
 115   3          }
 116   2        }
 117   1      
 118   1        if (func_index_temp == DECODER_MENU)
 119   1        {
 120   2          logout_cycle_number++;
 121   2          if (logout_cycle_number == 20)
 122   2          {
 123   3            logout_cycle_table++;
 124   3            logout_cycle_number = 0;
 125   3          }
 126   2      
 127   2        }
 128   1      #ifdef COPY_TWO_MACHINE
 129   1        if (func_index_temp != DECODER_MENU && func_index_temp != TWO_MENU_Fd_SET && func_index_temp != TWO_MENU_
             -FE_E1_SET&& func_index_temp != TWO_MENU_FE_E2_SET)
 130   1      #else
                if (func_index_temp != DECODER_MENU && func_index_temp != TWO_MENU_Fd_SET)
              #endif
 133   1        {
 134   2          return_standby_time++;
 135   2          if (return_standby_time >200)
 136   2          {
 137   3            return_standby_time = 0;
 138   3            set_func_index(MENU_STANDBY);
 139   3          }
 140   2        }
 141   1      
 142   1        if (func_index_temp == MENU_STANDBY && Two_Menu_FC_E1_temp == 2)
 143   1        {
 144   2          second_times++;
 145   2          if (second_times >= 10)
 146   2          {
 147   3            P55 = ~P55;
 148   3            second_times = 0;
 149   3          }
 150   2        }
 151   1      
 152   1      }
 153          
 154          void Timer1_isr(void) interrupt 3  //定时器1中断服务程序
 155          {
 156   1        unsigned char func_index_temp = 0;
 157   1        func_index_temp = return_func_index();
 158   1        TF1 = 0;
 159   1        TH1 = (65536 - 100) >> 8;     //重新赋值 100us
 160   1        TL1 = (65536 - 100) & 0xff;
 161   1        if (func_index_temp == TWO_MENU_FA_SET)
 162   1        {
 163   2          RF_decode_main_sjz_test();
 164   2        }
 165   1        else
 166   1        {
 167   2          RF_decode_main();
 168   2        }
 169   1        
 170   1      }
 171          
 172          unsigned char return_await_number_table(void) //返回await_number_table变量的值
C51 COMPILER V9.00   TIMER                                                                 03/10/2016 16:30:10 PAGE 4   

 173          {
 174   1        unsigned char await_number_table_temp=0;
 175   1        await_number_table_temp = await_number_table;
 176   1        return await_number_table_temp;
 177   1      }
 178          
 179          void set_await_number_table(unsigned char temp) //设置await_number_table变量的值
 180          {
 181   1        await_number_table = temp;
 182   1      }
 183          
 184          void set_main_press_time_table(unsigned char temp) //设置main_press_time_table变量的值
 185          {
 186   1        main_press_time_table = temp;
 187   1      }
 188          
 189          unsigned char return_main_press_time(void)
 190          {
 191   1        unsigned char temp = 0;
 192   1        temp = main_press_time;
 193   1        return temp;
 194   1      }
 195          
 196          void clear_main_press_time(void)
 197          {
 198   1        main_press_time = 0;
 199   1      }
 200          
 201          unsigned char return_logout_cycle_table(void)
 202          {
 203   1        unsigned char temp = 0;
 204   1        temp = logout_cycle_table;
 205   1        return temp;
 206   1      }
 207          
 208          void set_logout_cycle_table(unsigned char temp) //设置logout_cycle_table变量的值
 209          {
 210   1        logout_cycle_table = temp;
 211   1      }
 212          
 213          void clear_return_standby_time(void)
 214          {
 215   1        return_standby_time = 0;
 216   1      }
 217          
 218          void set_main_press_time(unsigned char temp)
 219          {
 220   1        main_press_time = temp;
 221   1      }
 222          
 223          unsigned char return_fd_table(void) //返回fd_table变量的值
 224          {
 225   1        unsigned char fd_table_temp = 0;
 226   1        fd_table_temp = fd_table;
 227   1        return fd_table_temp;
 228   1      }
 229          
 230          void set_fd_table(unsigned char temp) //设置fd_table变量的值
 231          {
 232   1        fd_table = temp;
 233   1        await_number = 0;
 234   1      }
C51 COMPILER V9.00   TIMER                                                                 03/10/2016 16:30:10 PAGE 5   

 235          
 236          unsigned char return_filter_main(void)  //返回filter_main变量的值
 237          {
 238   1        unsigned char filter_main_temp = 0;
 239   1        filter_main_temp = filter_main;
 240   1        return filter_main_temp;
 241   1      }
 242          
 243          void set_filter_main(unsigned char temp) //设置filter_main变量的值
 244          {
 245   1        filter_main = temp;
 246   1        await_number = 0;
 247   1      }
 248          
 249          unsigned char return_filter_other(void) //返回filter_main变量的值
 250          {
 251   1        unsigned char filter_other_temp = 0;
 252   1        filter_other_temp = filter_other;
 253   1        return filter_other_temp;
 254   1      }
 255          
 256          void set_filter_other(unsigned char temp) //设置filter_main变量的值
 257          {
 258   1        filter_other = temp;
 259   1      }
 260          
 261          void clear_again_and_again_time(void)
 262          {
 263   1        again_and_again_time = 0;
 264   1      }
 265          
 266          void clear_second_filter_time(void)
 267          {
 268   1        second_filter_time = 0;
 269   1      }
 270          
 271          void set_second_filter_table(unsigned char temp) //设置second_filter_table变量的值
 272          {
 273   1        second_filter_table = temp;
 274   1      }
 275          
 276          unsigned char return_second_filter_table(void)  //返回second_filter_table变量的值
 277          {
 278   1        unsigned char second_filter_table_temp = 0;
 279   1        second_filter_table_temp = second_filter_table;
 280   1        return second_filter_table_temp;
 281   1      }
 282          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    550    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     14       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
